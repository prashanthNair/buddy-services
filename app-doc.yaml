---
openapi: 3.0.0
info:
  title: Migobucks Buddy Api
  description: |
    This is a Migobucks Server.  You can find
    out more about Migobucks at
    [http://migobucks.com) or on
    [http://migobucks.in].
  version: 1.0.0
servers: 
- url: http://localhost:3000/v1
  description: Migobucks Buddy Api
tags:
- name: Buddy
  description: Everything about Migobucks Buddy
paths:
  /auth/register:
    put:
      tags:
      - Buddy
      summary: Update an existing Buddy credentails
      operationId: updatePet
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
    post:
      tags:
      - buddy
      summary: register as buddy user
      operationId: onboardBuddy
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        "405":
          description: Invalid input
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /auth/user:
    get:
      tags:
      - Buddy
      summary: Finds Buddy status
      description: Multiple status values can be provided with comma separated strings
      operationId: findBuddyStatus
      parameters:
      - name: id
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: integer 
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: User 
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid status value
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        UserName:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        Password:
          type: string
        Location:
          type: string
          default: ""
        State:
          type: string
        Country:
          type: string
        Email:
          type: string
        MobileNum:
          type: string
          default: ""
        IsActive:
          type: boolean
          default: true
        CreatedDate:
          type: string
          format: date-time
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    User:
      description: User object that needs to be added to the Buddy system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
        application/xml:
          schema:
            $ref: '#/components/schemas/User'
      required: true
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
